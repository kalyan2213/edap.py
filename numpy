import numpy as np

print("creating array object")
arr = np.array([1, 2, 3, 4, 5])
print(arr)
print(type(arr))

print("use a tuple to create a numpy array")
arr = np.array((1, 2, 3, 4, 5))
print(arr)

print("create a 0-D array")
arr = np.array(42)
print(arr)

print("create a 1-D array")
arr = np.array([1, 2, 3, 4, 5])
print(arr)

print("create a 2-D array")
arr = np.array([[1, 2, 3], [4, 5, 6]])
print(arr)

print("create a 3-D array")
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])
print(arr)

print("check dimensions")
a = np.array(42)
b = np.array([1, 2, 3, 4, 5])
c = np.array([[1, 2, 3], [4, 5, 6]])
d = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])
print("is 0 dimension?")
print(a.ndim)
print("is 1 dimension?")
print(b.ndim)
print("is 2 dimension?")
print(c.ndim)
print("is 3 dimension?")
print(d.ndim)

print("highest dimension")
arr = np.array([1, 2, 3, 4], ndmin=5)
print(arr)
print("number of dimension:1", arr.ndim)

print("accessing array element in 2 dimensional array")
arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
print(arr)
print("2nd element on 1st row:", arr[0, 1])
print("5th element on 2nd row:", arr[1, 4])
print("last element from 2nd dim:", arr[1, -1])

print("accessing array elements in 3 dimensional array")
arr = np.array([[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]])
print(arr)
print("Elements at 0, 1, 2 is")
print(arr[0, 1, 2])

print("array is")
arr = np.array([1, 2, 3, 4, 5, 6, 7])
print(arr)
print("slice element from index 1 to index 5")
print(arr[1:5])
print("slice element from index 4")
print(arr[4:])
print("slice element from the beginning to index 4")
print(arr[:4])
print("slice from the index 3 from the end to index 1")
print(arr[-3:-1])
print("Return every other element from index 1 to index 5")
print(arr[1:5:2])
print("Return every other element from the entire array")
print(arr[::2])

print("search or find the indexes where the values are even")
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])
x = np.where(arr % 2 == 0)
print(x)

print("search or find the indexes where the value 7 should be inserted")
arr = np.array([6, 7, 8, 9])
x = np.searchsorted(arr, 7)
print(x)

print("sort the array")
print("array before sort is")
arr = np.array([3, 2, 0, 1, 12, 6, 34, 23, 89, 13, 2, 14])
print(arr)
print("sorted array is")
print(np.sort(arr))

print("sort the array alphabetically")
print("before sort")
arr = np.array(['banana', 'cherry', 'apple'])
print(arr)
print("after sort")
print(np.sort(arr))

print("sort a 2-D array is")
print("before sort a 2-D array is")
arr = np.array([[3, 2, 4], [5,0, 1]])
print(arr)
print("after sort a 2D array is")
print(np.sort(arr))

print("array join or concatenation")
print("first array is")
arr1 = np.array([1, 2, 3])
print(arr1)
print("second array is")
arr2 = np.array([4, 5, 6])
print(arr2)
arr = np.concatenate((arr1, arr2))
print("array after join")
print(arr)

print("array Iterating means going through elements one by one as we deal with multi-dimension as arrays in numpy, we can do this using basic for loop of python. If we iterate on a 1-D array it will go through each element one by one")
print("Iterate on the elements of the following 1-D array")
arr = np.array([1, 2, 3])
for x in arr:
    print(x)

print("Iteration 2-D Array")
print("Method 1: in a 2-D array, it will go through all the rows")
arr = np.array([[1, 2, 3], [4, 5, 6]])
for x in arr:
    print(x)

print("Method 2: iterate on each scalar element")
arr = np.array([[1, 2, 3], [4, 5, 6]])
for x in arr:
    for y in x:
        print(y)
